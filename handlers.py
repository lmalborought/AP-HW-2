from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram import Router, F
from googletrans import Translator
from functions import *
from states import *
from config import API_KEY_wether, API_KEY_sport, API_KEY_food
from datetime import datetime
from keyboards import settings
import matplotlib.pyplot as plt

router = Router()

translator = Translator()

users = {}


@router.message(Command('start'))
async def start(message: Message):
    await message.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å /set_profile')


@router.message(Command('set_profile'))
async def set_profile(message: Message, state: FSMContext):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.')
    await state.set_state(User.name)


@router.message(User.name)
async def set_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.')
    await state.set_state(User.age)


@router.message(User.age)
async def set_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        await state.update_data(age=age)
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (—Å–º).')
        await state.set_state(User.height)
    except ValueError:
        await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç.")


@router.message(User.height)
async def set_height(message: Message, state: FSMContext):
    try:
        height = int(message.text)
        await state.update_data(height=height)
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å(–∫–≥).')
        await state.set_state(User.weight)
    except ValueError:
        await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω –≤–µ—Å.")


@router.message(User.weight)
async def set_weight(message: Message, state: FSMContext):
    try:
        weight = int(message.text)
        await state.update_data(weight=weight)
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å.')
        await state.set_state(User.city)
    except ValueError:
        await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω —Ä–æ—Å—Ç")


@router.message(User.city)
async def set_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.reply('''–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∂–µ–ª–∞–µ–º—É—é –Ω–æ—Ä–º—É –∫–æ–ª–æ—Ä–∏–π, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '0' –∏ –Ω–æ—Ä–º–∞ –±—É–¥–µ—Ç —Ä–∞—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞–º–∏.''')
    await state.set_state(User.calorie_goal)


@router.message(User.calorie_goal)
async def set_calorie_goal(message: Message, state: FSMContext):
    calorie_goal = int(message.text)
    data = await state.get_data()
    name, age, height, weight, city = data['name'], data['age'], data['height'], data['weight'], data['city']
    if calorie_goal == 0:
        calorie_goal = calorie_count(weight, height, age)
    users[message.from_user.id] = {
        'name': name.title(),
        'age': age,
        'height': height,
        'weight': weight,
        'city': city.title(),
        'water_goal': water_count(weight),
        'calorie_goal': calorie_goal,
        "logged_water": 0,
        "logged_calories": 0,
        "burned_calories": 0,
        'last_update': datetime.now().date()
    }
    await message.reply(f'‚úîÔ∏è {name}, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤! –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–º–∞–Ω–¥ –Ω–∞–∂–º–∏—Ç–µ /help')
    await state.clear()


@router.message(Command('help'))
async def get_help(message: Message):
    await message.reply(f'–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:\n'
                        f'/help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n'
                        f'/log_water - –ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã\n'
                        f'/log_food - –ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω–æ–π –ø–∏—â–∏\n'
                        f'/log_workout - –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n'
                        f'/check_progress - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞ –¥–µ–Ω—å\n'
                        f'/check_progress_graph - –ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n'
                        f'/see_profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è\n'
                        f'/change_profile - –∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è\n'
                        f'/get_advice - –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
                        )


@router.message(Command('log_water'))
async def logging_water(message: Message):
    try:
        user = users.get(message.from_user.id)
        await day(user)
        log_water = message.text.split()
        if len(log_water) < 2:
            await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
        else:
            user['logged_water'] += int(log_water[1])
            await message.reply(f"{user['name']}, –≤—ã –≤—ã–ø–∏–ª–∏ {log_water[1]} –º–ª –≤–æ–¥—ã, –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å"
                                f" {user['water_goal'] - user['logged_water']} –º–ª")
    except ValueError:
        await message.reply("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")


@router.message(Command('log_food'))
async def log_food(message: Message, state: FSMContext):
    await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã —Å—ä–µ–ª–∏.')
    await state.set_state(Food.name)


@router.message(Food.name)
async def food_name(message: Message, state: FSMContext):
    try:
        name = message.text
        await state.update_data(name=name)
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö.')
        await state.set_state(Food.amount)
    except ValueError:
        await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç")


@router.message(Food.amount)
async def food_amount(message: Message, state: FSMContext):
    user = users.get(message.from_user.id)
    await day(user)
    amount = message.text
    data = await state.get_data()
    name = data['name']
    total_calories = get_calorie(f'{amount}g {await translate(name)}', API_KEY_food)
    user['logged_calories'] += total_calories
    await message.reply(f'{user["name"]}, –≤—ã —Å—ä–µ–ª–∏ {amount}–≥ {name}. –ó–∞–ø–∏—Å–∞–Ω–æ: {total_calories} –∫–∫–∞–ª.')
    await state.clear()


@router.message(Command('change_profile'))
async def change_profile(message: Message, state: FSMContext):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç.')
    await state.set_state(UserChange.age)


@router.message(UserChange.age)
async def change_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        await state.update_data(age=age)
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å(–∫–≥).')
        await state.set_state(UserChange.weight)
    except ValueError:
        await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç.")


@router.message(UserChange.weight)
async def change_weight(message: Message, state: FSMContext):
    try:
        weight = int(message.text)
        await state.update_data(weight=weight)
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å.')
        await state.set_state(UserChange.city)
    except ValueError:
        await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω –≤–µ—Å")


@router.message(UserChange.city)
async def set_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.reply('''–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∂–µ–ª–∞–µ–º—É—é –Ω–æ—Ä–º—É –∫–æ–ª–æ—Ä–∏–π, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '0' –∏ –Ω–æ—Ä–º–∞ –±—É–¥–µ—Ç —Ä–∞—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞–º–∏.''')
    await state.set_state(UserChange.calorie_goal)


@router.message(UserChange.calorie_goal)
async def change_city(message: Message, state: FSMContext):
    user = users.get(message.from_user.id)
    calorie_goal = int(message.text)
    data = await state.get_data()
    age, weight, city = data['age'], data['weight'], data['city']
    if calorie_goal == 0:
        calorie_goal = calorie_count(weight, user['height'], age)
    user['age'] = age
    user['weight'] = weight
    user['city'] = city.title()
    user['water_goal'] = water_count(weight)
    user['calorie_goal'] = calorie_goal
    await message.reply(f'‚úîÔ∏è {user["name"]}, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏–∑–º–µ–Ω–µ–Ω!')
    await state.clear()


@router.message(Command('get_advice'))
async def get_advice(message: Message):
    await message.answer(f'–í—ã–±–µ—Ä–µ—Ç–µ:', reply_markup=settings)


@router.callback_query(F.data == 'low_calory')
async def get_advice(callback: CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –°–ø–∏—Å–æ–∫ –Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
    await callback.message.answer(f'üî∏ –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –π–æ–≥—É—Ä—Ç –±–µ–∑ –¥–æ–±–∞–≤–æ–∫ –∏ –Ω–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π - 55 –∫–ö–∞–ª 100–≥.\n'
                                  f'üî∏ –ö—É—Ä–∏–Ω–∞—è –∏–ª–∏ –∏–Ω–¥—é—à–∞—á—å—è –≥—Ä—É–¥–∫–∞ - 239-189 –∫–ö–∞–ª 100–≥.\n'
                                  f'üî∏ –ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã - 90-100 –∫–ö–∞–ª 100–≥.\n'
                                  f'üî∏ –ë–µ–ª–∞—è –Ω–µ–∂–∏—Ä–Ω–∞—è —Ä—ã–±–∞ - 70‚Äì100 –∫–ö–∞–ª 100–≥.\n'
                                  f'üî∏ –¢–≤–æ—Ä–æ–≥ 0-2% –∂–∏—Ä–Ω–æ—Å—Ç–∏ - 74,4 –∫–ö–∞–ª 100–≥.\n'
                                  f'üî∏ –¢–æ—Ñ—É - 83 –∫–ö–∞–ª 100–≥.\n'
                                  f'üî∏ –ö–µ—Ñ–∏—Ä 0-1% –∂–∏—Ä–Ω–æ—Å—Ç–∏ - 40 –∫–ö–∞–ª 100–≥.\n')


@router.callback_query(F.data == 'sport_ideas')
async def get_advice(callback: CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ò–¥–µ–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π')
    await callback.message.answer(f'üîπ –°–∫–∞–∫–∞–ª–∫–∞ - –∑–∞ –º–∏–Ω—É—Ç—É –º–æ–∂–Ω–æ —Å–∂–µ—á—å 14-15 –∫–∫–∞–ª.\n'
                                  f'üîπ  –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è - –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å 53,6 –∫–∫–∞–ª –∑–∞ 4 –º–∏–Ω—É—Ç—ã.\n'
                                  f'üîπ –ë—ë—Ä–ø–∏ - –Ω–∞ –æ–¥–Ω–æ –±—ë—Ä–ø–∏ (–æ—Ç–∂–∏–º–∞–Ω–∏–µ —Å –ø–æ–¥–ø—Ä—ã–≥–≤–∞–Ω–∏–µ–º) –∑–∞—Ç—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è 1,40 –∫–∫–∞–ª\n'
                                  f'üîπ –ü–ª–∞–≤–∞–Ω–∏–µ - –ø–ª–∞–≤–∞–Ω–∏–µ –±—Ä–∞—Å—Å–æ–º —Å–∂–∏–≥–∞–µ—Ç –ø–æ—Ä—è–¥–∫–∞ 750 –∫–∏–ª–æ–∫–∞–ª–æ—Ä–∏–π, –∞ –Ω–∞ —Å–ø–∏–Ω–µ ‚Äî 600.\n'
                                  f'üîπ –í–µ–ª–æ—Å–ø–æ—Ä—Ç - –º–æ–∂–Ω–æ —Å–∂–µ—á—å ~600 –∫–∏–ª–æ–∫–∞–ª–æ—Ä–∏–π –∑–∞ —á–∞—Å–æ–≤—É—é –≤–µ–ª–æ—Å–∏–ø–µ–¥–Ω—É—é –ø–æ–µ–∑–¥–∫—É.\n'
                                  f'üîπ –ë–µ–≥ - —á–∞—Å –±–µ–≥–∞ —Å —Ç–µ–º–ø–æ–º 7 –º–∏–Ω. –∑–∞ –∫–º —Å–∂–∏–≥–∞–µ—Ç –ø–æ—Ä—è–¥–∫–∞ 600 –∫–∏–ª–æ–∫–∞–ª–æ—Ä–∏–π.\n')


@router.message(Command('check_progress_graph'))
async def check_progress_graph(message: Message):
    user = users.get(message.from_user.id)
    await day(user)

    labels = ['–í—ã–ø–∏—Ç–æ –≤–æ–¥—ã', '–û—Å—Ç–∞–ª–æ—Å—å']
    calorie_labels = ['–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ –∫–∫–∞–ª', '–û—Å—Ç–∞–ª–æ—Å—å']

    water_values = [user['logged_water'], max(0, user['water_goal'] - user['logged_water'])]
    calorie_values = [user['logged_calories'], max(0, user['calorie_goal'] - user['logged_calories'])]

    fig, axes = plt.subplots(1, 2, figsize=(15, 5))

    axes[0].pie(water_values, labels=labels, colors=['#3674B5', '#A1E3F9'], autopct='%1.1f%%')
    axes[0].set_title('–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–¥–µ')
    axes[1].pie(calorie_values, labels=calorie_labels, colors=['#F72C5B', '#FF748B'], autopct='%1.1f%%')
    axes[1].set_title('–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º')

    plt.savefig("progress.png", format='png')
    image = FSInputFile("progress.png")
    await message.answer_photo(image)


@router.message(Command('see_profile'))
async def see_profile(message: Message):
    user = users.get(message.from_user.id)
    await day(user)
    await message.reply(f"–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                        f"–ò–º—è: {user['name']}\n"
                        f"–í–æ–∑—Ä–∞—Å—Ç: {user['age']}\n"
                        f"–í–µ—Å: {user['weight']}\n"
                        f"–†–æ—Å—Ç: {user['height']}\n"
                        )


@router.message(Command('log_workout'))
async def log_workout(message: Message):
    user = users.get(message.from_user.id)
    await day(user)
    try:
        activity, duration = message.text.split()[1:]
        count_calories = calorie_burned(await translate(activity), int(duration), API_KEY_sport)
        user['burned_calories'] += count_calories
        water = (int(duration) // 30) * 200
        user['water_goal'] += water
        await message.reply(f"üí™ {user['name']}, –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É {activity} {duration} –º–∏–Ω—É—Ç - {count_calories} –∫–∫–∞–ª.\n"
                            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {water} –º–ª –≤–æ–¥—ã.")
    except ValueError:
        await message.reply('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑ –∞ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ /log_workout <—Ç–∏–ø—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è(–º–∏–Ω)>')


@router.message(Command('check_progress'))
async def check_progress(message: Message):
    user = users.get(message.from_user.id)
    await day(user)
    await message.reply(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
                        f"–í–æ–¥–∞:\n"
                        f"- –í—ã–ø–∏—Ç–æ: {user['logged_water']} –º–ª –∏–∑ {user['water_goal']}\n"
                        f"- –û—Å—Ç–∞–ª–æ—Å—å: {user['water_goal'] - user['logged_water']} –º–ª.\n"
                        f"–ö–∞–ª–æ—Ä–∏–∏:\n"
                        f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user['logged_calories']} –∫–∫–∞–ª –∏–∑ {user['calorie_goal']} –∫–∫–∞–ª.\n"
                        f"- –°–æ–∂–∂–µ–Ω–æ: {user['burned_calories']} –∫–∫–∞–ª.\n"
                        f"- –ë–∞–ª–∞–Ω—Å: {user['calorie_goal'] - user['logged_calories']} –∫–∫–∞–ª.")


async def translate(text):
    translated = await translator.translate(text, src='ru', dest='en')
    return translated.text


async def day(user):
    if user['last_update'] < datetime.now().date():
        user['logged_water'] = 0
        user['logged_calories'] = 0
        user['burned_calories'] = 0
        weather = get_temp(await translate(user['city']), API_KEY_wether)
        if weather < 25:
            user['water_goal'] = water_count(user['weight'])
        else:
            user['water_goal'] = water_count(user['weight']) + 600
